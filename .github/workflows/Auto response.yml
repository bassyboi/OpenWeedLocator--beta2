name: Auto Comment on Issues

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Auto comment on issue
      uses: actions/github-script@v6
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        script: |
          const axios = require('axios');
          const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

          // Context based on whether it's an issue or a comment
          let issueTitle, issueBody, issue_number;
          if (github.context.eventName === 'issues') {
            issueTitle = github.context.payload.issue.title;
            issueBody = github.context.payload.issue.body;
            issue_number = github.context.payload.issue.number;
          } else if (github.context.eventName === 'issue_comment') {
            issueTitle = github.context.payload.issue.title; // Title is available directly from the issue linked to the comment
            issueBody = github.context.payload.comment.body; // Comment body as the main context
            issue_number = github.context.payload.issue.number;
          }

          const prompt = `Title: ${issueTitle}\nBody: ${issueBody}\n\nPlease provide a helpful comment:`;
          const data = {
            prompt: prompt,
            max_tokens: 350,
            temperature: 0,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0,
            model: "text-davinci-003"
          };

          axios.post('https://api.openai.com/v1/completions', data, {
            headers: {
              'Authorization': `Bearer ${OPENAI_API_KEY}`,
              'Content-Type': 'application/json'
            }
          }).then(response => {
            if (response.data.choices && response.data.choices.length > 0) {
              const comment = response.data.choices[0].text.trim();
              const ghToken = process.env.GH_TOKEN;
              const octokit = require('@actions/github').getOctokit(ghToken);

              octokit.rest.issues.createComment({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                issue_number: issue_number,
                body: comment
              });
            } else {
              console.log('No response generated from OpenAI.');
            }
          }).catch(error => {
            console.error('Failed to generate or post comment:', error.message);
          });
