name: Auto Comment on Issues

on:
  issues:
    types: [opened, edited]  # This configuration already triggers on newly opened issues.
  issue_comment:
    types: [created]

jobs:
  comment:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3  # Using the latest stable version.

    - name: Auto comment on issue
      uses: actions/github-script@v6
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        script: |
          const { context, getOctokit } = require('@actions/github');

          const eventName = context.eventName;
          let issueTitle, issueBody, issue_number;

          // Check the type of event and extract necessary information
          if (eventName === 'issues') {
            issueTitle = context.payload.issue.title;
            issueBody = context.payload.issue.body || 'No additional details provided.'; // Handle cases where the body might be empty.
            issue_number = context.payload.issue.number;
            const action = context.payload.action;  // Capture the action to differentiate between opened and edited issues.

            // Generate prompt based on the action
            const prompt = action === 'opened' ? 
              `A new issue titled "${issueTitle}" has been opened with the following details: ${issueBody}. Please provide a helpful welcome message and initial guidance.` :
              `Issue titled "${issueTitle}" has been edited. Updated details: ${issueBody}. Please update the response accordingly.`;

            const data = JSON.stringify({
              prompt: prompt,
              max_tokens: 350,
              temperature: 0,
              top_p: 1,
              frequency_penalty: 0,
              presence_penalty: 0,
              model: "text-davinci-002"
            });

            const response = await fetch('https://api.openai.com/v1/completions', {
              method: 'POST',
              body: data,
              headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
              }
            });

            const responseData = await response.json();

            if (responseData.choices && responseData.choices.length > 0) {
              const comment = responseData.choices[0].text.trim();
              const octokit = getOctokit(process.env.GH_TOKEN);

              await octokit.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: comment
              });
            } else {
              console.log('No response generated from OpenAI.');
            }
          } else if (eventName === 'issue_comment') {
            // Handle issue comments if necessary
          }
