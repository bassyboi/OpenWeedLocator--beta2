################################################################################
Notes on relay_control.py

Summary completed on 07/02/2024
Summary based on commit 962e3fb
################################################################################

Purpose:
- Provides functionality for interacting with the relay hardware via the Pi's 
  GPIO pins, as well as a controller with multiple threads for handling spray 
  job queueing and execution. 
- Also includes test functions to mimic hardware activation on non-Pi platforms.
- It has four classes: 
  - TestRelay
  - TestBuzzer
  - RelayControl
  - Controller


Entrypoint:
- No __main__ check, although it sets a testing flag if the system is not a Pi.
- If the system is not a Pi, it uses terminal messages to indicated beeps and 
  nozzle sprays instead of manipulating the (nonexistent) GPIO pins.


TestRelay class:
- Test function to mimic a physical relay when testing on a non-Pi device.
- It has three methods:
  - __init__
  - on
  - off

TestRelay class --> __init__ method:
- Saves the relay number and a verbose flag as attributes of the relay.

TestRelay class --> on method:
- If verbose is enabled, prints a terminal message to indicate relay is on.

TestRelay class --> off method:
- If verbose is enabled, prints a terminal message to indicate relay is off.


TestBuzzer class:
- Test function to mimic a physical buzzer when testing on a non-Pi device.
- It has one method:
  - beep

TestBuzzer class --> beep method:
- Can print beep a prescribed number of times with a prescribed delay. 


RelayControl class:
- Controls the relays on the relay board using the Pi's GPIO pins.
- It has nine methods:
  - __init__
  - relay_on 
  - relay_off 
  - beep
  - all_on
  - all_off 
  - remove
  - clear
  - stop

RelayControl class --> __init__ method:
- Takes a dictionary of relay numbers mapped to GPIO pin numbers. 
- Creates a gpiozero OutputDevice object for each relay number. 
- Creates a gpio Buzzer object.
- If not being run on a Pi, uses the TestRelay and TestBuzzer classes instead.

RelayControl class --> relay_on method:
- Takes a relay number and verbose boolean as an input. 
- Uses the realy's OutputDevice object to turn on the relay. 
- Prints a terminal message saying the relay is on if verbose is True.

RelayControl class --> relay_off method:
- Takes a relay number and verbose boolean as an input. 
- Uses the relay's OutputDevice object to turn off the relay. 
- Prints a terminal message saying the relay is off if verbose is True.

RelayControl class --> beep method:
- Can beep for a prescribed number of times and for a prescribed duration. 
- The delay between beeps is half of the beep duration.

RelayControl class --> all_on method:
- Applies relay_on to all of the relays.

RelayControl class --> all_off method:
- Applies relay_off to all of the relays.

RelayControl class --> remove method:
- Takes a relay number as an input and removes it from the relay dictionary.
- Effectively disables the relay from being activated.

RelayControl class --> clear method:
- Removes all relays from the relay dictionary. 
- Effectively disables all relays from being activated.

RelayControl class --> stop method:
- WARNING, ERROR IN METHOD'S LOGIC. 
- Removes all relays from the relay dictionary with the clear method. 
- Turns all of the (zero) relays in the relay dictionary off with all_off.


Controller class:
- Called in the __init__ method of the owl class.
- Manages the queue of spray 'jobs' that are produced after detection.
- Uses daemon threads to allow parallel processing of spray 'jobs'.
- It has three methods:
  - __init__
  - receive
  - consumer

Controller class --> __init__ method:
- Instantiates the Relay control class using the provided nozzle dictionary.
- Creates a nozzle queue dictionary for queueing jobs for each nozzle. 
- Creates a nozzle condition dictionary for coordinating the threads. 
- Creates weed_log.txt, which is used by the whole program for logging.
- Starts terminal visualisation of nozzle spraying if enabled.
- For each nozzle in the nozzle dictionary:
  - Creates a double-ended queue with a max length of 5 for storing jobs.
  - Creates a Condition object for managing thread synchronisation. 
  - Creates a Thread that runs the consumer method. 
  - Sets the thread as a Daemon thread. 
  - Starts the thread.
- Beeps to notify user of successful nozzle setup. 

Controller class --> receive method:
- Takes a nozzle number and timestamp as input, and adds the job to the queue.
- Could also take variable spray duration, delay, or GPS location. 
- The queue message contains the nozzle number, timestamp, duration and delay.
- To add the message to the corresponding nozzles queue:
  - Acquires the condition lock by entering the "with inputCondition:" block. 
  - Adds the message to the nozzle's queue. 
  - Notifies the nozzle's consumer thread to wake up and process the message. 
  - Releases the condition lock by leaving the "with inputCondition:" block. 
- It then logs the message it added to the queue in weed_log.txt. 

Controller class --> consumer method:
- Acquires the condition lock using "inputCondition.acquire()". 
- Enters a loop for processing all of the queued jobs sequentially. 
- For each spray job in the queue:
  - Removes the oldest spray job from the queue.
  - Releases the condition lock using "inputCondition.release()" so that the 
    main thread can add new jobs to the queue whilst it processes the current 
    job. 
  - Checks if the current time is later than the timestamp + spray duration. 
    - If it is, the system has 'missed' the spray and sets onDur to zero. 
    - If it isn't, the system sets onDur to the remaining spray time. 
  - Waits for the specified delay duration. 
  - Turns on the terminal display for the nozzle (if enabled).
  - Sprays for the duration of onDur.
  - Re-acquires the condition lock to check if there are any more jobs. 
    - If there are, it leaves the nozzle on, leaves the terminal nozzle display 
      on, restarts the loop, and skips the next job's delay period to ensure 
      continual spraying. 
    - If there aren't, it turns off the nozzle, turns off the terminal nozzle 
      display, and exits the loop.
- Once the queue is empty, the condition lock is released and the thread goes to
  sleep using "inputCondition.wait()".